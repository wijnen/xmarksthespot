#!/usr/bin/env python

# gwz2wfz - convert old style gwz and gwc cartridges into wfz.
# Copyright 2012 Bas Wijnen <wijnen@debian.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import os
import zipfile
import struct
import sys
import re
import lua
import wherigo

# Reverse substitutions (in reverse order):
# '&amp;' -> '&'		"&" with "&amp;"
# '&lt;' -> '<'			"<" with "&lt;"
# '&gt;' -> '>'			">" with "&gt;"
# 				"\t" with "   " (three spaces)
# '%s*&nbsp;%s*' -> '   '	two and more spaces with "&nbsp;"
# 				"\r\n" or "\n\r" with "\n"
# '%s*<BR>%s*' -> '\n'		"\r" or "\n" with "<BR>\n"

# Do this before displaying in Dialog, ShowStatusText, LogMessage, MessageBox and when creating any ZObject description.

template = '''\
require Wherigo
-- Generated code to make media usable by old-style code.
Wherigo.ZMedia_list = {%s}
function Wherigo.ZMedia(...)
	return Wherigo.ZMedia_list:remove(1)
end
-- Generated wrapper to use old newline style.
function Wherigo.deconvert_nl(str)
	return str:gsub('%%s*<BR>%%s*', '\n'):gsub('%%s*&nbsp;%%s*', '   '):gsub('&gt;', '>'):gsub('&lt;', '<'):gsub('&amp;', '&')
end
-- TODO: The above function should also be used in Dialog and when setting the Description of a ZObject.
Wherigo.orig_MessageBox = Wherigo.MessageBox
function Wherigo.MessageBox(table)
	return Wherigo.orig_MessageBox{Text=Wherigo.deconvert_nl(table.Text), Media=table.Media, Buttons=table.Buttons, Callback=table.Callback}
end
function Wherigo.ShowStatusText(text)
	return Wherigo.orig_ShowStatusText(Wherigo.deconvert_nl(text))
end
function Wherigo.LogMessage(text, level)
	if level == nil then
		level = text.Level
		if text.Text != nil then
			text = text.Text
		end
	end
	return Wherigo.orig_LogMessage(Wherigo.deconvert_nl(text), level)
end
return assert(loadstring(%s))()
'''

lua_magic = b'\x1bLua'	# Magic number to detect a compiled lua file.
gwc_magic = b'\x02\x0aCART\x00'	# Magic number to detect a gwc file.

class ZMedia (wherigo.ZObject):
	_list = []
	@wherigo._table_arg
	def __init__ (self, Cartridge, Container = None, Active = None, Commands = None, Description = None, Icon = None, Media = None, Name = None, ObjectLocation = None, Visible = None, **ka):
		if len (ka) > 0:
			sys.stderr.write ('Warning: unknown commands given to ZMedia: %s\n' % ka)
		wherigo.ZObject.__init__ (self, {'Cartridge': Cartridge, 'Container': Container, 'Active': Active, 'Commands': Commands, 'Description': Description, 'Icon': Icon, 'Media': Media, 'Name': Name, 'ObjectLocation': ObjectLocation, 'Visible': Visible})
		self._index = len (ZMedia._list)
		ZMedia._list.append (self)

class Converter:
	def __init__ (self, name, file, gwc, copyright, license):
		self.name = name
		self.copyright = copyright
		self.license = license
		self.gwc = gwc
		if gwc:
			self.file = file
			magic = file.read (len (gwc_magic))
			if magic != gwc_magic:
				sys.stderr.write ('This is not a gwc file.\n')
				sys.exit (1)
			num = self.read_short (file)
			self.file_id = [None] * num
			self.offset = [None] * num
			for i in range (num):
				self.file_id[i] = self.read_short (file)
				self.offset[i] = self.read_int (file)
			header_size = self.read_int (file)
			header = file.read (header_size)
			lua_size = self.read_int (file)
			orig_lua = file.read (lua_size)
			self.pos = len (gwc_magic) + 2 + num * 6 + 4 + header_size + 4 + lua_size
		else:
			self.gwz = zipfile.ZipFile (file, 'r')
			self.info = self.gwz.infolist ()
			luafiles = [x for x in self.info if x.filename.endswith ('.lua')]
			if len (luafiles) != 1:
				sys.stderr.write ('Error: file does not contain exactly one lua file\n')
				sys.exit (1)
			orig_lua = self.gwz.open (luafiles[0]).read ()
			self.info.remove (luafiles[0])
		if orig_lua.startswith (lua_magic):
			# This is already compiled, so we can't do any replacements.
			self.lua = orig_lua
		else:
			self.lua = self.mangle_string (orig_lua)
		self.parser = lua.lua ()
		# Create this object; it is required for old style cartridges, but not for the new ones that wherigo.py is meant to be used with.
		wherigo.ZMedia = ZMedia
		wherigo._script = self.parser
		self.parser.module ('Wherigo', wherigo)
		self.parser.run ('', 'Env', {
				'Platform': 'converter',
				'CartFolder': '/whatever',
				'SyncFolder': '/whatever',
				'LogFolder': '/whatever',
				'PathSep': '/',
				'DeviceID': 'Python',
				'Version': '1.0',
				'Downloaded': 0,
				'CartFilename': self.name,
				'Device': 'PocketPC'
			}, name = 'setting Env')
		self.cart = self.parser.run (self.lua, name = 'running lua code')[0]

		self.wfi = 'Format: 1.0\n'
		self.wfi += self.get ('Name', 'Description', default = False)
		self.wfi += self.get ('Version')
		self.wfi += self.get ('Author')
		self.wfi += self.get ('Company')
		self.wfi += 'Copyright: %s\n' % self.mangle_string (self.copyright)
		self.wfi += 'License: %s\n' % self.mangle_string (self.license)

		self.wfi += self.get ('CreateDate')
		self.wfi += self.get ('UpdateDate')

		self.wfi += self.get ('Activity', default = False)
		self.media = self.get_media ('Media')
		self.icon = self.get_media ('Icon')
		if self.cart.StartingLocation == wherigo.INVALID_ZONEPOINT:
			val = 'None'
		else:
			val = '%f %f %f' % (self.cart.StartingLocation.latitude, self.cart.StartingLocation.longitude, self.cart.StartingLocation.altitude ())
		self.wfi += self.get ('StartingLocation', 'StartingLocationDescription', value = val, default = False)

		self.wfi += self.get ('TargetDevice')
		self.wfi += self.get ('TargetDeviceVersion')
		self.wfi += self.get ('BuilderVersion')
	def mangle_string (self, orig):
		ret = ''
		start_re = re.compile (r'''"|'|\[(=*)\[''')
		end_re1 = re.compile (r"""(?:[^\\']|\\.)*'""")
		end_re2 = re.compile (r'''(?:[^\\"]|\\.)*"''')
		while True:
			pos = start_re.search (orig)
			if pos is None:
				return ret + orig
			ret += orig[:pos.end ()]
			orig = orig[pos.end ():]
			if pos.group (0) == "'":
				end = end_re1.search (orig).end () - 1
			elif pos.group (0) == '"':
				end = end_re2.search (orig).end () - 1
			else:
				end = orig.find (']' + pos.group (1) + ']')
				if end < 0:
					sys.stderr.write ('Unmatched long open bracket.\n')
					sys.exit (1)
			ret += self.mangle (orig[:end + 1])
			orig = orig[end + 1:]
	def get (self, name, longname = None, value = None, default = None):
		ret = ''
		if value is None:
			if hasattr (self.cart, name):
				if self.gwc:
					ret += name + ': ' + getattr (self.cart, name) + '\n'
				else:
					ret += name + ': ' + self.unmangle (getattr (self.cart, name)) + '\n'
			elif default is False:
				sys.stderr.write ("Cartridge didn't define required attribute %s\n" % name)
				sys.exit (1)
			else:
				return ''
		else:
			ret += name + ': ' + value + '\n'
		if longname is not None and hasattr (self.cart, longname):
			if self.gwc:
				val = getattr (self.cart, longname)
			else:
				val = self.unmangle (getattr (self.cart, longname))
			if val.strip () != '':
				ret += '\t' + '\n\t'.join (getattr (self.cart, longname).split ('\n')) + '\n'
		return ret
	def get_media (self, name):
		if not hasattr (self.cart, name):
			return ''
		obj = getattr (self.cart, name)
		if obj is None:
			return None
		return ZMedia._list[obj._index]
	def mangle (self, string):
		# Substitutions (in this order):
		# "&" with "&amp;"
		# "<" with "&lt;"
		# ">" with "&gt;"
		# "\t" with "   " (three spaces)
		# two and more spaces with "&nbsp;"
		# "\r\n" or "\n\r" with "\n"
		# "\r" or "\n" with "<BR>\n"
		string = string.replace ('&', '&amp;')
		string = string.replace ('<', '&lt;')
		string = string.replace ('>', '&gt;')
		string = string.replace ('\t', '   ')
		string = '&nbsp;'.join (re.split ('  +', string))
		string = '\n'.join (re.split ('\n\r|\r\n', string))
		string = '<BR>\n'.join (re.split ('\n|\r', string))
		return string
	def unmangle (self, string):
		string = '\n'.join (re.split (r'\s*<BR>\s*', string))
		string = '   '.join (re.split (r'\s*&nbsp;\s*', string))
		return string.replace ('&gt;', '>').replace ('&lt;', '<').replace ('&amp;', '&')
	def as_string (self, string):
		level = 0
		while True:
			if (']' + '=' * level + ']') not in string:
				return '([' + '=' * level + '[' + string + ']' + '=' * level + '])'
			level += 1
	def as_id (self, string):
		ret = '_'.join (re.split ('[^a-zA-Z0-9]', string))
		if ret == '' or '0' <= ret[0] <= '9':
			ret = '_' + ret
		return ret
	def make_name (self, name):
		name = self.as_id (os.path.splitext (name)[0])
		n = name
		i = 0
		while n in self.names:
			n = '%s%d' % (name, i)
			i += 1
		self.names.add (n)
		return n
	def write_target (self, file):
		self.names = set ()
		with zipfile.ZipFile (file, 'w') as wfz:
			for m in ZMedia._list:
				m._name = None
				if not hasattr (m, 'Resources') or len (m.Resources.list ()) == 0:
					sys.stderr.write ('Warning: no files specified for Media %d\n' % m._index)
					continue
				for f in m.Resources.list ():
					if m._name is None:
						m._name = self.make_name (os.path.basename (f['Filename']))
						m._filename = f['Filename']
						self.wfi += 'Media: ' + m._name + '\n'
					self.wfi += 'File: ' + f['Filename'] + '\n'
					if 'Directives' in f:
						for d in f['Directives'].list ():
							self.wfi += '\t%s\n' % d
				if m._name is None:
					m._name = self.make_name ('unknown')
			if self.media:
				self.wfi += 'Poster: ' + self.media._name + '\n'
			if self.icon:
				self.wfi += 'Icon: ' + self.icon._name + '\n'
			media = ',\n'.join (['Wherigo.Media.%s' % m._name for m in ZMedia._list])
			wfz.writestr (os.path.join (self.name, '_cartridge.lua'), template % (media, self.as_string (self.lua)))
			wfz.writestr (os.path.join (self.name, '_cartridge.wfi'), self.wfi)
			if self.gwc:
				files = zip (self.file_id, self.offset)
				files.sort (key = lambda x: x[1])
				for file_id, offset in files[1:]:
					if offset < self.pos:
						sys.stderr.write ('Error: gwc file has overlapping components.\n')
						sys.exit (1)
					if offset > self.pos:
						self.file.read (offset - self.pos)
					flag = self.file.read (1)
					if flag == '\0':
						sys.stderr.write ('Info: file %d is not present in gwc; skipping.\n' % file_id)
						self.pos = offset + 1
						continue
					self.read_int (self.file)
					size = self.read_int (self.file)
					info = os.path.join (self.name, 'Media', ZMedia._list[file_id - 1]._filename)
					wfz.writestr (info, self.file.read (size))
					self.pos = offset + 1 + 4 + 4 + size
			else:
				for info in self.info:
					data = self.gwz.open (info, 'r').read ()
					info.filename = os.path.join (self.name, 'Media', os.path.basename (info.filename))
					wfz.writestr (info, data)
	def read_short (self, f):
		return struct.unpack ('<H', f.read (2))[0]
	def read_int (self, f):
		return struct.unpack ('<I', f.read (4))[0]

def main ():
	a = argparse.ArgumentParser ()
	a.add_argument ('--copyright', help = 'copyright statement', default = 'copyright holder is not known')
	a.add_argument ('--license', help = 'license statement', default = 'license is not known')
	a.add_argument ('--name', help = 'cartridge name (defaults basename of input)', default = None)
	a.add_argument ('gwz_or_gwc', help = 'input cartridge filename (use - for standard input)')
	a.add_argument ('--wfz', help = 'output cartridge filename (use - for standard output; default is the same as input, with extension wfz)', default = None)
	a.add_argument ('--force', help = 'overwrite wfz file if it exists', action = 'store_true')
	a.add_argument ('--gwc', help = 'force input to be treated as a gwc file', action = 'store_const', const = True, default = None)
	a.add_argument ('--gwz', help = 'force input to be treated as a gwz file', action = 'store_const', const = False, dest = 'gwc', default = None)
	args = a.parse_args ()
	if args.name is None:
		name = os.path.splitext (os.path.basename (args.gwz_or_gwc))[0]
	else:
		name = args.name
	if args.gwz_or_gwc == '-':
		f = sys.stdin
		gwc = False
		if args.wfz is None or args.wfz == '-':
			of = lambda: sys.stdout
			ofname = None
		else:
			ofname = args.wfz
	else:
		gwc = os.path.splitext (args.gwz_or_gwc)[1].lower () == (os.extsep + 'gwc').lower ()
		f = open (args.gwz_or_gwc, 'rb')
		if args.wfz is None:
			ofname = os.path.splitext (os.path.basename (args.gwz_or_gwc))[0] + os.extsep + 'wfz'
		elif args.wfz == '-':
			of = sys.stdout
			ofname = None
		else:
			ofname = args.wfz
	if ofname is not None:
		if os.path.exists (ofname):
			sys.stderr.write ('Target wfz file already exists!\n')
			if args.force:
				sys.stderr.write ('Overwriting at your request.\n')
			else:
				sys.exit (1)
		of = lambda: open (ofname, 'wb')	# Use lambda function to delay creating the file.
	c = Converter (name, f, args.gwc if args.gwc is not None else gwc, args.copyright, args.license)
	c.write_target (of ())

if __name__ == '__main__':
	main ()
